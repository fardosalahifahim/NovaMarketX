{"version":3,"file":"static/js/266.b78a79f0.chunk.js","mappings":"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","sources":["components/Register.js","firebaseConfig.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Register.css';\r\nimport { getAuth, createUserWithEmailAndPassword, updateProfile, GoogleAuthProvider, signInWithPopup, sendEmailVerification } from \"firebase/auth\";\r\nimport { app } from '../firebaseConfig';\r\nimport axios from 'axios';\r\n\r\nconst auth = getAuth(app);\r\nconst provider = new GoogleAuthProvider();\r\n\r\nconst Register = ({ onRegister }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [showVerifyButton, setShowVerifyButton] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      await updateProfile(userCredential.user, {\r\n        displayName: username,\r\n        phoneNumber: phone\r\n      });\r\n      // Send email verification\r\n      if (userCredential.user) {\r\n        await sendEmailVerification(userCredential.user);\r\n      }\r\n      // Save user data to backend admin panel\r\n      await axios.post('http://localhost:5000/api/users', {\r\n        username,\r\n        email,\r\n        phone,\r\n        password\r\n      });\r\n      // Sign out the user to prevent auto-login\r\n      await auth.signOut();\r\n      // Show success message and provide link to verify\r\n      setError('');\r\n      setSuccessMessage('Registration successful! Please check your email and verify your account.');\r\n      setShowVerifyButton(true);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const handleGoogleSignIn = () => {\r\n    signInWithPopup(auth, provider)\r\n      .then(async (result) => {\r\n        const user = result.user;\r\n        // Save user data to backend admin panel\r\n        await axios.post('http://localhost:5000/api/users', {\r\n          username: user.displayName || '',\r\n          email: user.email || '',\r\n          phone: user.phoneNumber || '',\r\n          password: '' // No password for Google sign-in\r\n        });\r\n        onRegister(true);\r\n        setError('');\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n      });\r\n  };\r\n\r\n  const handleGoToLogin = () => {\r\n    window.location.href = '/login';\r\n  };\r\n\r\n  const handleGoToVerify = () => {\r\n    window.location.href = '/verify-email';\r\n  };\r\n\r\n  return (\r\n    <div className=\"register-container\">\r\n      <h2>Register</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"tel\"\r\n          placeholder=\"Phone Number\"\r\n          value={phone}\r\n          onChange={(e) => setPhone(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n        {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n        <button type=\"submit\">Register</button>\r\n        {showVerifyButton && (\r\n          <button className=\"verify-btn\" onClick={handleGoToVerify}>\r\n            Go to Email Verification\r\n          </button>\r\n        )}\r\n      </form>\r\n      <button className=\"google-signin-btn\" onClick={handleGoogleSignIn}>\r\n        <img\r\n          src={require('../icons/Nav-icon/google.png')}\r\n          alt=\"Google logo\"\r\n          className=\"google-logo\"\r\n        />\r\n        Sign in with Google\r\n      </button>\r\n      <div className=\"login-section\">\r\n        <button className=\"login-btn\" onClick={handleGoToLogin}>\r\n          Already have an account? Login\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBjV2cxQt96NBZuN7VpYzQ61Vl2CHpOO4Q\",\r\n  authDomain: \"anime-sprig.firebaseapp.com\",\r\n  projectId: \"anime-sprig\",\r\n  storageBucket: \"anime-sprig.firebasestorage.app\",\r\n  messagingSenderId: \"349853958324\",\r\n  appId: \"1:349853958324:web:b917efb1d5a2af736617e1\",\r\n  measurementId: \"G-RGT6YF60BB\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\nexport { app, analytics };\r\n"],"names":["auth","getAuth","app","provider","GoogleAuthProvider","_ref","onRegister","username","setUsername","useState","email","setEmail","phone","setPhone","password","setPassword","error","setError","successMessage","setSuccessMessage","showVerifyButton","setShowVerifyButton","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","userCredential","createUserWithEmailAndPassword","updateProfile","user","displayName","phoneNumber","sendEmailVerification","axios","post","signOut","message","type","placeholder","value","onChange","target","required","onClick","handleGoToVerify","window","location","href","handleGoogleSignIn","signInWithPopup","then","result","catch","src","require","alt","handleGoToLogin","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getAnalytics"],"sourceRoot":""}