{"version":3,"file":"static/js/54.a5f53aa1.chunk.js","mappings":"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","sources":["components/FAQHelpChat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './FAQHelpChat.css';\r\n\r\nconst FAQHelpChat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [users, setUsers] = useState([]);\r\n  const messagesEndRef = useRef(null);\r\n  const auth = getAuth();\r\n  const location = useLocation();\r\n\r\n  // Extract userId from URL query parameters\r\n  // For format ?{UID}, we need to extract the value after the ?\r\n  const search = location.search;\r\n  let urlUserId = null;\r\n  if (search.startsWith('?')) {\r\n    // Remove the ? and use the rest as the userId\r\n    urlUserId = search.substring(1);\r\n  }\r\n  \r\n  // If we don't have a URL-based userId, use the authenticated user's ID\r\n  const getUserId = () => {\r\n    if (urlUserId) {\r\n      return urlUserId;\r\n    }\r\n    if (currentUser) {\r\n      return currentUser.uid;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setCurrentUser(user);\r\n    });\r\n    \r\n    fetchUsers();\r\n    \r\n    // Set up real-time connection\r\n    setupRealTimeConnection();\r\n    \r\n    return () => unsubscribe();\r\n  }, [urlUserId, currentUser]);\r\n\r\n  const setupRealTimeConnection = () => {\r\n    // Use URL userId if available, otherwise use current user's ID\r\n    const userId = getUserId();\r\n    \r\n    if (!userId) {\r\n      console.log('No user ID available for real-time connection');\r\n      return;\r\n    }\r\n    \r\n    // Fetch initial messages\r\n    fetchMessages(userId);\r\n    \r\n    // Set up SSE connection\r\n    const eventSource = new EventSource(`http://localhost:5000/api/messages/stream?userId=${userId}`);\r\n    \r\n    eventSource.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        console.log('Received real-time message:', data);\r\n        \r\n        // If data is an array, it's initial data\r\n        if (Array.isArray(data)) {\r\n          setMessages(data);\r\n        } else {\r\n          // If data is a single object, it's a new message\r\n          setMessages(prevMessages => {\r\n            // Check if message already exists to avoid duplicates\r\n            if (prevMessages.some(msg => msg.id === data.id)) {\r\n              return prevMessages;\r\n            }\r\n            return [...prevMessages, data];\r\n          });\r\n        }\r\n        scrollToBottom();\r\n      } catch (error) {\r\n        console.error('Error parsing real-time message:', error);\r\n      }\r\n    };\r\n    \r\n    eventSource.onerror = (error) => {\r\n      console.error('SSE error:', error);\r\n    };\r\n    \r\n    // Clean up event source on component unmount\r\n    return () => {\r\n      eventSource.close();\r\n    };\r\n  };\r\n\r\n  const fetchMessages = async (userId) => {\r\n    try {\r\n      if (!userId) return;\r\n      const res = await axios.get(`http://localhost:5000/api/messages?userId=${userId}`);\r\n      setMessages(res.data);\r\n      scrollToBottom();\r\n    } catch (error) {\r\n      console.error('Error fetching FAQ messages:', error);\r\n    }\r\n  };\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:5000/api/users');\r\n      setUsers(res.data);\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  };\r\n\r\n  const getUsername = (userId) => {\r\n    // Handle both numeric IDs and string UIDs\r\n    const user = users.find(u => {\r\n      // Convert both to strings for comparison\r\n      return String(u.id) === String(userId) || u.uid === String(userId);\r\n    });\r\n    \r\n    // If we found a user in our database, return their username\r\n    if (user) {\r\n      return user.username;\r\n    }\r\n    \r\n    // If we have a currently authenticated user, return their display name\r\n    if (currentUser && (String(currentUser.uid) === String(userId) || String(currentUser.id) === String(userId))) {\r\n      // Firebase user objects have displayName property\r\n      return currentUser.displayName || currentUser.email || 'Authenticated User';\r\n    }\r\n    \r\n    // For Google-authenticated users, try to find by email or UID\r\n    if (userId) {\r\n      // Try to find user by UID\r\n      const userByUid = users.find(u => u.uid === String(userId));\r\n      if (userByUid) {\r\n        return userByUid.username;\r\n      }\r\n      \r\n      // Try to find user by email (if userId is an email)\r\n      if (userId.includes('@')) {\r\n        const userByEmail = users.find(u => u.email === userId);\r\n        if (userByEmail) {\r\n          return userByEmail.username;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Default fallback\r\n    return 'Unknown User';\r\n  };\r\n\r\n  const isCurrentUser = (senderId) => {\r\n    // Handle both numeric IDs and string UIDs\r\n    const currentUserId = getUserId();\r\n    if (currentUserId) {\r\n      return senderId === currentUserId;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    // Use URL userId if available, otherwise use current user's ID\r\n    const userId = getUserId();\r\n    \r\n    if (!input.trim() || !userId) return;\r\n    \r\n    try {\r\n      const adminId = 'animespring';\r\n      const senderId = userId;\r\n      const receiverId = adminId;\r\n      \r\n      const response = await axios.post('http://localhost:5000/api/faq-messages', {\r\n        content: input,\r\n        senderId,\r\n        receiverId\r\n      });\r\n      \r\n      console.log('Message sent response:', response.data);\r\n      setInput('');\r\n      // Note: Real-time update will come through SSE, so we don't need to manually update state here\r\n    } catch (error) {\r\n      console.error('Error sending FAQ message:', error);\r\n      // Show error to user\r\n      alert('Error sending message: ' + (error.response?.data?.error || 'Unknown error'));\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"faq-help-chat-container\">\r\n      <h2>FAQ & Help Chat</h2>\r\n      <div className=\"messages-container\">\r\n        {messages.map((msg) => (\r\n          <div\r\n            key={msg.id}\r\n            className={`message-item ${isCurrentUser(msg.senderId) ? 'sent' : 'received'}`}\r\n          >\r\n            <div className=\"message-username\">{getUsername(msg.senderId)}</div>\r\n            <div className=\"message-content\">{msg.content}</div>\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <textarea\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"Type your message...\"\r\n          rows={3}\r\n        />\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FAQHelpChat;\r\n"],"names":["FAQHelpChat","messages","setMessages","useState","input","setInput","currentUser","setCurrentUser","users","setUsers","messagesEndRef","useRef","auth","getAuth","search","useLocation","urlUserId","startsWith","substring","getUserId","uid","useEffect","unsubscribe","onAuthStateChanged","user","fetchUsers","setupRealTimeConnection","userId","console","log","fetchMessages","eventSource","EventSource","concat","onmessage","event","data","JSON","parse","Array","isArray","prevMessages","some","msg","id","scrollToBottom","error","onerror","close","async","res","axios","get","current","scrollIntoView","behavior","getUsername","find","u","String","username","displayName","email","userByUid","includes","userByEmail","isCurrentUser","senderId","currentUserId","handleSend","trim","receiverId","response","post","content","_error$response","_error$response$data","alert","_jsxs","className","children","_jsx","map","ref","value","onChange","e","target","onKeyPress","key","preventDefault","placeholder","rows","onClick"],"sourceRoot":""}