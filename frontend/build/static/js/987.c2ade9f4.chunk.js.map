{"version":3,"file":"static/js/987.c2ade9f4.chunk.js","mappings":"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","sources":["firebaseConfig.js","components/Login.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBjV2cxQt96NBZuN7VpYzQ61Vl2CHpOO4Q\",\r\n  authDomain: \"anime-sprig.firebaseapp.com\",\r\n  projectId: \"anime-sprig\",\r\n  storageBucket: \"anime-sprig.firebasestorage.app\",\r\n  messagingSenderId: \"349853958324\",\r\n  appId: \"1:349853958324:web:b917efb1d5a2af736617e1\",\r\n  measurementId: \"G-RGT6YF60BB\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\nexport { app, analytics };\r\n","import React, { useState } from 'react';\r\nimport './Login.css';\r\nimport { getAuth, signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup, sendPasswordResetEmail } from \"firebase/auth\";\r\nimport { app } from '../firebaseConfig';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst auth = getAuth(app);\r\nconst provider = new GoogleAuthProvider();\r\n\r\nconst Login = ({ onLogin }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loginSuccess, setLoginSuccess] = useState(false);\r\n  const [resetMessage, setResetMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Disable email login for admin panel\r\n    if (email === 'admin@example.com') {\r\n      setError('Email login is disabled for admin panel');\r\n      setLoginSuccess(false);\r\n      return;\r\n    }\r\n    signInWithEmailAndPassword(auth, email, password)\r\n      .then((userCredential) => {\r\n        const user = userCredential.user;\r\n        if (!user.emailVerified) {\r\n          // Sign out the user if email not verified\r\n          auth.signOut();\r\n          setError('Please verify your email address before logging in. Check your inbox for the verification link.');\r\n          setLoginSuccess(false);\r\n          return;\r\n        }\r\n        // Signed in and verified\r\n        setLoginSuccess(true);\r\n        onLogin(true);\r\n        setError('');\r\n        navigate('/');\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n        setLoginSuccess(false);\r\n      });\r\n  };\r\n\r\n  const handleGoogleSignIn = () => {\r\n    signInWithPopup(auth, provider)\r\n      .then((result) => {\r\n        const user = result.user;\r\n        if (!user.emailVerified) {\r\n          // Sign out if not verified\r\n          auth.signOut();\r\n          setError('Please verify your email address before logging in.');\r\n          setLoginSuccess(false);\r\n          return;\r\n        }\r\n        // Send user info to backend\r\n        fetch('http://localhost:5000/api/users/google', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            uid: user.uid,\r\n            email: user.email,\r\n            displayName: user.displayName\r\n          }),\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          console.log('User registered/updated in backend:', data);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error registering user in backend:', error);\r\n        });\r\n\r\n        setLoginSuccess(true);\r\n        onLogin(true);\r\n        setError('');\r\n        navigate('/');\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n        setLoginSuccess(false);\r\n      });\r\n  };\r\n\r\n  const handleForgotPassword = () => {\r\n    if (!email) {\r\n      setError('Please enter your email address first.');\r\n      return;\r\n    }\r\n    sendPasswordResetEmail(auth, email)\r\n      .then(() => {\r\n        setResetMessage('Password reset email sent! Check your inbox.');\r\n        setError('');\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n        setResetMessage('');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <div className=\"forgot-password-container\">\r\n        <button className=\"forgot-password-container\" onClick={handleForgotPassword}>\r\n          Forgot Password?\r\n        </button>\r\n        </div>\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n        <button type=\"submit\">Login</button>\r\n      </form>\r\n      <button className=\"google-signin-button\" onClick={handleGoogleSignIn}>\r\n        <img\r\n          src={require('../icons/Nav-icon/google.png')}\r\n          alt=\"Google logo\"\r\n          className=\"google-logo\"\r\n        />\r\n        Sign in with Google\r\n      </button>\r\n      <div className=\"register-section\">\r\n        <button className=\"register-btn\" onClick={() => navigate('/register')}>\r\n          Don't have an account? Sign up\r\n        </button>\r\n      </div>\r\n      {loginSuccess && <p className=\"success-message\">Login successful!</p>}\r\n      {resetMessage && <p className=\"reset-message\">{resetMessage}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getAnalytics","auth","getAuth","provider","GoogleAuthProvider","_ref","onLogin","email","setEmail","useState","password","setPassword","error","setError","loginSuccess","setLoginSuccess","resetMessage","setResetMessage","navigate","useNavigate","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","signInWithEmailAndPassword","then","userCredential","user","emailVerified","signOut","catch","message","type","placeholder","value","onChange","target","required","onClick","handleForgotPassword","sendPasswordResetEmail","handleGoogleSignIn","signInWithPopup","result","fetch","method","headers","body","JSON","stringify","uid","displayName","response","json","data","console","log","src","require","alt"],"sourceRoot":""}