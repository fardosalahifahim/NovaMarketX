{"version":3,"file":"static/js/683.83e82fba.chunk.js","mappings":"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","sources":["components/PaymentGateway.js","components/Checkout.js","components/AddressForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './PaymentGateway.css';\r\n\r\nconst PaymentGateway = ({ onSelectPaymentMethod }) => {\r\n  const [selectedMethod, setSelectedMethod] = useState(null);\r\n\r\n  const handlePaymentMethodClick = (method) => {\r\n    setSelectedMethod(method);\r\n    if (onSelectPaymentMethod) {\r\n      onSelectPaymentMethod(method);\r\n    }\r\n  };\r\n\r\n  console.log('PaymentGateway component rendered');\r\n\r\n  return (\r\n    <div className=\"payment-gateway-container\">\r\n      <h2>Select Payment Method</h2>\r\n      <div className=\"payment-methods\">\r\n        <button\r\n          className={selectedMethod === 'Credit/Debit Card' ? 'selected' : ''}\r\n          onClick={() => handlePaymentMethodClick('Credit/Debit Card')}\r\n        >\r\n          Credit/Debit Card\r\n        </button>\r\n        <button\r\n          className={selectedMethod === 'Nagad' ? 'selected' : ''}\r\n          onClick={() => handlePaymentMethodClick('Nagad')}\r\n        >\r\n          Nagad\r\n        </button>\r\n        <button\r\n          className={selectedMethod === 'Save bKash Account' ? 'selected' : ''}\r\n          onClick={() => handlePaymentMethodClick('Save bKash Account')}\r\n        >\r\n          Save bKash Account\r\n        </button>\r\n        <button\r\n          className={selectedMethod === 'Cash on Delivery' ? 'selected' : ''}\r\n          onClick={() => handlePaymentMethodClick('Cash on Delivery')}\r\n        >\r\n          Cash on Delivery\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaymentGateway;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { fetchAddresses, updateAddresses } from '../services/AddressBookService';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\r\nimport PaymentGateway from './PaymentGateway';\r\nimport './Checkout.css';\r\nimport { CartContext } from '../contexts/CartContext';\r\nimport { useNotification } from '../contexts/NotificationContext';\r\nimport AddressForm from './AddressForm';\r\n\r\nconst Checkout = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const auth = getAuth();\r\n  const { cartItems, clearCart } = useContext(CartContext);\r\n  const { showOrderNotification, showOrderStatusNotification, showOrderConfirmationNotification } = useNotification();\r\n\r\n\r\n  // Parse query parameters from URL\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const userIdFromUrl = searchParams.get('userId');\r\n\r\n  const [currentStep, setCurrentStep] = useState(1); // 1: Shipping Info, 2: Payment, 3: Confirmation\r\n  const [form, setForm] = useState({\r\n    fullName: '',\r\n    phoneNumber: '',\r\n    building: '',\r\n    colony: '',\r\n    region: '',\r\n    city: '',\r\n    area: '',\r\n    address: ''\r\n  });\r\n\r\n  const [savedAddresses, setSavedAddresses] = useState([]);\r\n  const [selectedAddressIndex, setSelectedAddressIndex] = useState(null);\r\n  const [editingAddress, setEditingAddress] = useState(false);\r\n\r\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [accessDenied, setAccessDenied] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      if (!user || user.uid !== userIdFromUrl) {\r\n        setAccessDenied(true);\r\n        setLoading(false);\r\n      } else {\r\n        setAccessDenied(false);\r\n        fetchSavedAddresses(userIdFromUrl);\r\n      }\r\n    });\r\n    return () => unsubscribe();\r\n  }, [auth, userIdFromUrl]);\r\n\r\n  const fetchSavedAddresses = async (userId) => {\r\n    try {\r\n      const res = await axios.get(`http://localhost:5000/api/users/${userId}`);\r\n      if (res.data && res.data.addresses) {\r\n        setSavedAddresses(res.data.addresses);\r\n        if (res.data.addresses.length > 0) {\r\n          setSelectedAddressIndex(0);\r\n          setForm(res.data.addresses[0]);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching saved addresses:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectAddress = (index) => {\r\n    setSelectedAddressIndex(index);\r\n    if (savedAddresses && savedAddresses.length > index) {\r\n      setForm(savedAddresses[index]);\r\n    } else {\r\n      setForm({\r\n        fullName: '',\r\n        phoneNumber: '',\r\n        building: '',\r\n        colony: '',\r\n        region: '',\r\n        city: '',\r\n        area: '',\r\n        address: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditAddress = () => {\r\n    setEditingAddress(true);\r\n  };\r\n\r\n  const handleSaveAddress = async (updatedAddress) => {\r\n    try {\r\n      if (selectedAddressIndex === null) {\r\n        // Adding new address\r\n        const newAddresses = [...savedAddresses, updatedAddress];\r\n        await updateUserAddresses(newAddresses);\r\n        setSelectedAddressIndex(newAddresses.length - 1);\r\n        setForm(updatedAddress);\r\n      } else {\r\n        // Updating existing address\r\n        const newAddresses = [...savedAddresses];\r\n        newAddresses[selectedAddressIndex] = updatedAddress;\r\n        await updateUserAddresses(newAddresses);\r\n        setForm(updatedAddress);\r\n      }\r\n      setEditingAddress(false);\r\n    } catch (error) {\r\n      console.error('Error saving address:', error);\r\n    }\r\n  };\r\n\r\n  const updateUserAddresses = async (addresses) => {\r\n    try {\r\n      const res = await axios.put(`http://localhost:5000/api/users/${userIdFromUrl}`, {\r\n        addresses: addresses\r\n      });\r\n      if (res.status === 200) {\r\n        setSavedAddresses(addresses);\r\n      } else {\r\n        console.error('Failed to update addresses');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating addresses:', error);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingAddress(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setForm({\r\n      ...form,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    if (!form.fullName.trim()) {\r\n      setError('Full name is required');\r\n      return false;\r\n    }\r\n    if (!form.phoneNumber.trim()) {\r\n      setError('Phone number is required');\r\n      return false;\r\n    }\r\n    if (!form.building.trim()) {\r\n      setError('Building / House No / Floor / Street is required');\r\n      return false;\r\n    }\r\n    if (!form.colony.trim()) {\r\n      setError('Colony / Suburb / Locality / Landmark is required');\r\n      return false;\r\n    }\r\n    if (!form.region.trim()) {\r\n      setError('Region is required');\r\n      return false;\r\n    }\r\n    if (!form.city.trim()) {\r\n      setError('City is required');\r\n      return false;\r\n    }\r\n    if (!form.area.trim()) {\r\n      setError('Area is required');\r\n      return false;\r\n    }\r\n    if (!form.address.trim()) {\r\n      setError('Address is required');\r\n      return false;\r\n    }\r\n    setError('');\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!validateForm()) return;\r\n    setError('');\r\n    setSuccessMessage('');\r\n    setCurrentStep(2); // Move to Payment step without placing order\r\n  };\r\n\r\n  const handleBackToShipping = () => {\r\n    setCurrentStep(1);\r\n  };\r\n\r\n  const handlePlaceOrder = async () => {\r\n    try {\r\n      if (!selectedPaymentMethod) {\r\n        setError('Please select a payment method');\r\n        return;\r\n      }\r\n      // Calculate total price from cartItems and products\r\n      // Include quantity information for each product\r\n      const totalPrice = cartItems.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 1), 0);\r\n      \r\n      // Create product details array with id and quantity for each item\r\n      const productDetails = cartItems.map(item => ({\r\n        id: item.id,\r\n        quantity: item.quantity || 1\r\n      }));\r\n\r\n      const orderData = {\r\n        shippingAddress: form,\r\n        productDetails: productDetails,\r\n        paymentMethod: selectedPaymentMethod,\r\n        totalPrice: totalPrice,\r\n        status: 'processing',\r\n        userId: userIdFromUrl,\r\n        orderDate: new Date().toISOString()\r\n      };\r\n      const response = await axios.post('http://localhost:5000/api/orders', orderData);\r\n      setSuccessMessage('Order placed successfully!');\r\n      setForm({\r\n        fullName: '',\r\n        phoneNumber: '',\r\n        building: '',\r\n        colony: '',\r\n        region: '',\r\n        city: '',\r\n        area: '',\r\n        address: ''\r\n      });\r\n      setSelectedPaymentMethod('');\r\n      clearCart();\r\n      setCurrentStep(3); // Move to Confirmation step after placing order\r\n      setError('');\r\n\r\n      // Notification will be handled by MyOrders component when status changes\r\n\r\n    } catch (error) {\r\n      setError('Failed to place order. Please try again.');\r\n      console.error('Order submission error:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"checkout-container\">\r\n        <h2>Loading...</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (accessDenied) {\r\n    return (\r\n      <div className=\"checkout-container\">\r\n        <h2>Access Denied</h2>\r\n        <p>You do not have permission to access this checkout page.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"checkout-container\">\r\n      <div className=\"order-steps\">\r\n        <div className={`step ${currentStep === 1 ? 'active' : ''}`}>Shipping Info</div>\r\n        <div className={`step ${currentStep === 2 ? 'active' : ''}`}>Payment</div>\r\n        <div className={`step ${currentStep === 3 ? 'active' : ''}`}>Confirmation</div>\r\n      </div>\r\n\r\n      {currentStep === 1 && (\r\n        <>\r\n          <h2>Select Shipping Address</h2>\r\n          <div className=\"address-select-dropdown\">\r\n            <select\r\n              value={selectedAddressIndex !== null ? selectedAddressIndex : 'add_new'}\r\n              onChange={(e) => {\r\n                const value = e.target.value;\r\n                if (value === 'add_new') {\r\n                  setEditingAddress(true);\r\n                  setSelectedAddressIndex(null);\r\n                } else {\r\n                  const index = parseInt(value, 10);\r\n                  handleSelectAddress(index);\r\n                  setEditingAddress(false);\r\n                }\r\n              }}\r\n            >\r\n              {savedAddresses.length > 0 ? (\r\n                savedAddresses.map((addr, index) => (\r\n                  <option key={index} value={index}>\r\n                    {`Address ${index + 1}`}\r\n                  </option>\r\n                ))\r\n              ) : null}\r\n              <option value=\"add_new\">Add New Address</option>\r\n            </select>\r\n          </div>\r\n\r\n          {editingAddress && (\r\n            <AddressForm\r\n              initialAddress={selectedAddressIndex !== null ? savedAddresses[selectedAddressIndex] : null}\r\n              onSave={handleSaveAddress}\r\n              onCancel={handleCancelEdit}\r\n            />\r\n          )}\r\n\r\n          {error && <p className=\"error-message\">{error}</p>}\r\n          {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n\r\n          {!editingAddress && (\r\n            <form onSubmit={handleSubmit} className=\"checkout-form\">\r\n              <label>\r\n                Full name\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"fullName\"\r\n                  placeholder=\"Enter your first and last name\"\r\n                  value={form.fullName}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                Phone Number\r\n                <input\r\n                  type=\"tel\"\r\n                  name=\"phoneNumber\"\r\n                  placeholder=\"Please enter your phone number\"\r\n                  value={form.phoneNumber}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                Building / House No / Floor / Street\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"building\"\r\n                  placeholder=\"Please enter\"\r\n                  value={form.building}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                Colony / Suburb / Locality / Landmark\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"colony\"\r\n                  placeholder=\"Please enter\"\r\n                  value={form.colony}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                Region\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"region\"\r\n                  placeholder=\"Please choose your region\"\r\n                  value={form.region}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                City\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"city\"\r\n                  placeholder=\"Please choose your city\"\r\n                  value={form.city}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                Area\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"area\"\r\n                  placeholder=\"Please choose your area\"\r\n                  value={form.area}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <label>\r\n                Address\r\n                <textarea\r\n                  name=\"address\"\r\n                  placeholder=\"For Example: House# 123, Street# 123, ABC Road\"\r\n                  value={form.address}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <button type=\"submit\">Next: Payment</button>\r\n            </form>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {currentStep === 2 && (\r\n        <>\r\n          <PaymentGateway onSelectPaymentMethod={setSelectedPaymentMethod} />\r\n          <div className=\"payment-navigation\">\r\n            <button onClick={handleBackToShipping}>Back to Shipping</button>\r\n            <button onClick={handlePlaceOrder}>Place Order</button>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {currentStep === 3 && (\r\n        <>\r\n          <h2>Order Confirmation</h2>\r\n          <p>Your order has been placed successfully!</p>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n","import React, { useState } from 'react';\r\nimport './AddressForm.css';\r\n\r\nconst AddressForm = ({ initialAddress, onSave, onCancel }) => {\r\n  const [address, setAddress] = useState(initialAddress || {\r\n    fullName: '',\r\n    phoneNumber: '',\r\n    building: '',\r\n    colony: '',\r\n    region: '',\r\n    city: '',\r\n    area: '',\r\n    address: '',\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setAddress(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSave(address);\r\n  };\r\n\r\n  return (\r\n    <div className=\"address-card\">\r\n      <form className=\"address-form\" onSubmit={handleSubmit}>\r\n        <label>\r\n          Full Name:\r\n          <input type=\"text\" name=\"fullName\" value={address.fullName} onChange={handleChange} required />\r\n        </label>\r\n        <label>\r\n          Phone Number:\r\n          <input type=\"text\" name=\"phoneNumber\" value={address.phoneNumber} onChange={handleChange} required />\r\n        </label>\r\n        <label>\r\n          Building / House No / Floor / Street:\r\n          <input type=\"text\" name=\"building\" value={address.building} onChange={handleChange} />\r\n        </label>\r\n        <label>\r\n          Colony / Suburb / Locality / Landmark:\r\n          <input type=\"text\" name=\"colony\" value={address.colony} onChange={handleChange} />\r\n        </label>\r\n        <label>\r\n          Region:\r\n          <input type=\"text\" name=\"region\" value={address.region} onChange={handleChange} />\r\n        </label>\r\n        <label>\r\n          City:\r\n          <input type=\"text\" name=\"city\" value={address.city} onChange={handleChange} />\r\n        </label>\r\n        <label>\r\n          Area:\r\n          <input type=\"text\" name=\"area\" value={address.area} onChange={handleChange} />\r\n        </label>\r\n        <label>\r\n          Address:\r\n          <textarea name=\"address\" value={address.address} onChange={handleChange} />\r\n        </label>\r\n        <div className=\"address-form-buttons\">\r\n          <button type=\"submit\">Save</button>\r\n          <button type=\"button\" onClick={onCancel}>Cancel</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddressForm;\r\n"],"names":["_ref","onSelectPaymentMethod","selectedMethod","setSelectedMethod","useState","handlePaymentMethodClick","method","console","log","_jsxs","className","children","_jsx","onClick","Checkout","useNavigate","location","useLocation","auth","getAuth","cartItems","clearCart","useContext","CartContext","showOrderNotification","showOrderStatusNotification","showOrderConfirmationNotification","useNotification","userIdFromUrl","URLSearchParams","search","get","currentStep","setCurrentStep","form","setForm","fullName","phoneNumber","building","colony","region","city","area","address","savedAddresses","setSavedAddresses","selectedAddressIndex","setSelectedAddressIndex","editingAddress","setEditingAddress","selectedPaymentMethod","setSelectedPaymentMethod","error","setError","successMessage","setSuccessMessage","accessDenied","setAccessDenied","loading","setLoading","useEffect","unsubscribe","onAuthStateChanged","user","uid","fetchSavedAddresses","async","res","axios","concat","userId","data","addresses","length","updateUserAddresses","put","status","handleChange","e","_objectSpread","target","name","value","_Fragment","onChange","index","handleSelectAddress","parseInt","map","addr","AddressForm","initialAddress","onSave","newAddresses","updatedAddress","onCancel","handleCancelEdit","onSubmit","preventDefault","trim","type","placeholder","required","PaymentGateway","handleBackToShipping","totalPrice","reduce","sum","item","price","quantity","productDetails","id","orderData","shippingAddress","paymentMethod","orderDate","Date","toISOString","post","setAddress","prev"],"sourceRoot":""}