{"version":3,"file":"static/js/41.5c9c3210.chunk.js","mappings":"qLAKA,MAkOA,EAlOsBA,IAAuB,IAAtB,aAAEC,GAAcD,EACrC,MAAOE,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,GACjCK,GAAOC,EAAAA,EAAAA,OACNC,EAAMC,IAAWR,EAAAA,EAAAA,UAAS,OAEjCS,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAcL,EAAKM,mBAAoBC,IAC3CJ,EAAQI,KAEV,MAAO,IAAMF,KACZ,CAACL,KAEJI,EAAAA,EAAAA,WAAU,KACJF,GACFM,EAAgBN,EAAKO,KACrBC,MAEAhB,EAAU,IACVK,GAAW,KAEZ,CAACG,EAAMV,IAEV,MAAMgB,EAAkBG,MAAOC,EAAQC,KACrC,IACE,IAAIC,EAAG,2CAAAC,OAA8CH,GACrD,MAAMI,QAAYC,MAAMH,GAClBI,QAAaF,EAAIG,OACvB,IAAIC,EAAiBF,EACrB,GAAIL,EAGAO,EADmB,cAAjBP,EACeK,EAAKG,OAAOC,GAA0B,cAAjBA,EAAMC,QAClB,aAAjBV,EACQK,EAAKG,OAAOC,GAA0B,aAAjBA,EAAMC,QAI3BL,OAEd,GAAI1B,EAET,GAAqB,YAAjBA,EAA4B,CAE9B,MAAMgC,EAAkB,CAAC,WAAY,aACrCJ,EAAiBF,EAAKG,OAAOC,GAASE,EAAgBC,SAASH,EAAMC,QACvE,MACEH,EAD0B,aAAjB5B,EACQ0B,EAAKG,OAAOC,GAA0B,aAAjBA,EAAMC,QAClB,cAAjB/B,EACQ0B,EAAKG,OAAOC,GAA0B,cAAjBA,EAAMC,QAE3BL,EAAKG,OAAOC,GAASA,EAAMC,SAAW/B,QAIzD4B,EAAiBF,EAAKG,OAAOC,GAA0B,aAAjBA,EAAMC,QAA0C,cAAjBD,EAAMC,QAE7E7B,EAAU0B,GACVrB,GAAW,EACb,CAAE,MAAO2B,GACPC,QAAQD,MAAM,8BAA+BA,GAC7C3B,GAAW,EACb,GAGIW,EAAgBC,UACpB,IACE,MAAMK,QAAYC,MAAM,sCAClBC,QAAaF,EAAIG,OACvBtB,EAAYqB,EACd,CAAE,MAAOQ,GACPC,QAAQD,MAAM,2BAA4BA,EAC5C,GAqDF,OAAKxB,EAIDJ,GACK8B,EAAAA,EAAAA,KAAA,KAAAC,SAAG,2BAGU,IAAlBpC,EAAOqC,QACFF,EAAAA,EAAAA,KAAA,KAAAC,SAAG,yBAIVE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBH,SAAA,EAChCE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,CACoB,aAAjBrC,GAA+B,aACd,aAAjBA,GAA+B,mBACd,YAAjBA,GAA8B,iBAC7BA,GAAgB,gBAEpBuC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBH,SAAA,EACrCD,EAAAA,EAAAA,KAAA,SAAOK,QAAQ,mBAAkBJ,SAAC,qBAChCE,EAAAA,EAAAA,MAAA,UACEG,GAAG,mBACHC,SAAWC,IACT,MAAMC,EAAQD,EAAEE,OAAOD,MACT,YAAVA,EACF3C,EAAW6C,GACT,IAAIA,GAAYC,KAAK,CAACC,EAAGC,IAAM,IAAIC,KAAKF,EAAEG,WAAa,IAAID,KAAKD,EAAEE,aAEjD,aAAVP,EACT3C,EAAW6C,GACT,IAAIA,GAAYC,KAAK,CAACC,EAAGC,IAAM,IAAIC,KAAKD,EAAEE,WAAa,IAAID,KAAKF,EAAEG,aAEjD,cAAVP,EACT7B,EAAgBN,EAAKO,IAAK,aACP,aAAV4B,EACT7B,EAAgBN,EAAKO,IAAK,YAE1BD,EAAgBN,EAAKO,MAEvBoB,SAAA,EAEFD,EAAAA,EAAAA,KAAA,UAAQS,MAAM,MAAKR,SAAC,SACpBD,EAAAA,EAAAA,KAAA,UAAQS,MAAM,YAAWR,SAAC,eAC1BD,EAAAA,EAAAA,KAAA,UAAQS,MAAM,WAAUR,SAAC,cACzBD,EAAAA,EAAAA,KAAA,UAAQS,MAAM,UAASR,SAAC,oBACxBD,EAAAA,EAAAA,KAAA,UAAQS,MAAM,WAAUR,SAAC,0BAG9BpC,EAAOoD,IAAIvB,IACVS,EAAAA,EAAAA,MAAA,OAAoBC,UAAU,mBAAkBH,SAAA,EAC9CD,EAAAA,EAAAA,KAAA,OAAKI,UAAU,uBAAsBH,SAClCP,EAAMwB,YAAcxB,EAAMwB,WAAWhB,OAAS,EAAIR,EAAMwB,WAAWD,IAAIE,IACtE,MAAMC,GAxGMd,EAwGmBa,EAvGlCnD,EAASqD,KAAKD,GAAWA,EAAQd,KAAOA,IADzBA,MAyGZ,OAAKc,GAEHjB,EAAAA,EAAAA,MAAA,OAAeC,UAAU,0BAAyBH,SAAA,EAChDD,EAAAA,EAAAA,KAAA,OAAKsB,IAAKF,EAAQG,SAAUC,IAAKJ,EAAQK,KAAMrB,UAAU,yBACzDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBH,SAAA,EACjCD,EAAAA,EAAAA,KAAA,OAAKI,UAAU,qBAAoBH,SAAEmB,EAAQK,QAC7CzB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mBAAkBH,SAAEmB,EAAQd,UAJrCa,IAFShB,EAAAA,EAAAA,MAAA,OAAAF,SAAA,CAAe,eAAakB,EAAI,iBAAtBA,MAU5BnB,EAAAA,EAAAA,KAAA,OAAAC,SAAK,yBAEZD,EAAAA,EAAAA,KAAA,OAAKI,UAAU,yBAAwBH,SACpCP,EAAMgC,iBACLvB,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAA1B,SAAA,EACEE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,eAAmB,IAAEP,EAAMgC,gBAAgBE,aACxDzB,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,kBAAsB,IAAEP,EAAMgC,gBAAgBG,gBAC3D1B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,0CAA8C,IAAEP,EAAMgC,gBAAgBI,aACnF3B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,2CAA+C,IAAEP,EAAMgC,gBAAgBK,WACpF5B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,YAAgB,IAAEP,EAAMgC,gBAAgBM,WACrD7B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,UAAc,IAAEP,EAAMgC,gBAAgBO,SACnD9B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,UAAc,IAAEP,EAAMgC,gBAAgBQ,SACnD/B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,aAAiB,IAAEP,EAAMgC,gBAAgBS,eAEtDnC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,sCAEXE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBH,SAAA,EAC/BE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,cAAkB,IAAEP,EAAMY,OACvCH,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,YAAgB,IAAmB,cAAjBP,EAAMC,OAAyB,aAAeD,EAAMC,WACnFQ,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,WAAe,KAAGP,EAAM0C,WAAa1C,EAAM0C,WAAWC,QAAQ,GAAK,UAChFlC,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAAKD,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,oBAAwB,IAAEP,EAAM4C,eAAiB,UAC5DtC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sBAAqBH,SACtB,eAAjBP,EAAMC,QACLK,EAAAA,EAAAA,KAAA,UAAQI,UAAU,mBAAmBmC,QAASA,IAtI9BxD,WACxB,WACoBM,MAAM,oCAADF,OAAqCqD,GAAW,CACrEC,OAAQ,QACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAElD,OAAQ,gBAEzBmD,GACNhF,EAAU6C,GACRA,EAAWM,IAAIvB,GACbA,EAAMY,KAAOkC,GAAOO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQrD,GAAK,IAAEC,OAAQ,aAAeD,IAI9DK,QAAQD,MAAM,yBAElB,CAAE,MAAOA,GACPC,QAAQD,MAAM,yBAA0BA,EAC1C,GAkH4DkD,CAAkBtD,EAAMY,IAAIL,SAAC,iBAEhE,aAAjBP,EAAMC,QAAwBK,EAAAA,EAAAA,KAAA,QAAMI,UAAU,wBAAuBH,SAAC,oBAAwBE,EAAAA,EAAAA,MAAA,QAAMC,UAAU,yBAAwBH,SAAA,CAAC,SAAOP,EAAMC,OAAOsD,OAAO,GAAGC,cAAgBxD,EAAMC,OAAOwD,MAAM,aAvClMzD,EAAMY,SAlDbN,EAAAA,EAAAA,KAAA,KAAAC,SAAG,uC,8EChId,MAQA,EARqBmD,KAEjBpD,EAAAA,EAAAA,KAAA,WAASI,UAAU,uCAAsCH,UACvDD,EAAAA,EAAAA,KAACqD,EAAAA,QAAa,CAACzF,aAAa,a","sources":["components/MyOrdersPhone.js","components/HistoryPhone.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\nimport './MyOrdersPhone.css';\r\n\r\nconst MyOrdersPhone = ({ statusFilter }) => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const auth = getAuth();\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((currentUser) => {\r\n      setUser(currentUser);\r\n    });\r\n    return () => unsubscribe();\r\n  }, [auth]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchUserOrders(user.uid);\r\n      fetchProducts();\r\n    } else {\r\n      setOrders([]);\r\n      setLoading(false);\r\n    }\r\n  }, [user, statusFilter]);\r\n\r\n  const fetchUserOrders = async (userId, filterStatus) => {\r\n    try {\r\n      let url = `http://localhost:5000/api/orders?userId=${userId}`;\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      let filteredOrders = data;\r\n      if (filterStatus) {\r\n        // Filter by the selected status from dropdown\r\n        if (filterStatus === 'delivered') {\r\n          filteredOrders = data.filter(order => order.status === 'delivered');\r\n        } else if (filterStatus === 'canceled') {\r\n          filteredOrders = data.filter(order => order.status === 'canceled');\r\n        } else {\r\n          // For other statuses, we might want to implement specific filtering logic\r\n          // For now, we'll just return all orders for other statuses\r\n          filteredOrders = data;\r\n        }\r\n      } else if (statusFilter) {\r\n        // Filter by the statusFilter prop (used when component is first loaded or prop changes)\r\n        if (statusFilter === 'history') {\r\n          // Show only orders that are canceled or delivered\r\n          const historyStatuses = ['canceled', 'delivered'];\r\n          filteredOrders = data.filter(order => historyStatuses.includes(order.status));\r\n        } else if (statusFilter === 'canceled') {\r\n          filteredOrders = data.filter(order => order.status === 'canceled');\r\n        } else if (statusFilter === 'delivered') {\r\n          filteredOrders = data.filter(order => order.status === 'delivered');\r\n        } else {\r\n          filteredOrders = data.filter(order => order.status === statusFilter);\r\n        }\r\n      } else {\r\n        // No statusFilter provided, show only orders not canceled or delivered (in process)\r\n        filteredOrders = data.filter(order => order.status !== 'canceled' && order.status !== 'delivered');\r\n      }\r\n      setOrders(filteredOrders);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching user orders:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/products');\r\n      const data = await res.json();\r\n      setProducts(data);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n    }\r\n  };\r\n\r\n  const getProductById = (id) => {\r\n    return products.find(product => product.id === id);\r\n  };\r\n\r\n  const handleCancelOrder = async (orderId) => {\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/orders/${orderId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ status: 'canceled' }),\r\n      });\r\n      if (res.ok) {\r\n        setOrders(prevOrders =>\r\n          prevOrders.map(order =>\r\n            order.id === orderId ? { ...order, status: 'canceled' } : order\r\n          )\r\n        );\r\n      } else {\r\n        console.error('Failed to cancel order');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error canceling order:', error);\r\n    }\r\n  };\r\n\r\n  const handleShipOrder = async (orderId) => {\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/orders/${orderId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ status: 'shipped' }),\r\n      });\r\n      if (res.ok) {\r\n        setOrders(prevOrders =>\r\n          prevOrders.map(order =>\r\n            order.id === orderId ? { ...order, status: 'shipped' } : order\r\n          )\r\n        );\r\n      } else {\r\n        console.error('Failed to mark order as shipped');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error marking order as shipped:', error);\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    return <p>Please log in to view your orders.</p>;\r\n  }\r\n\r\n  if (loading) {\r\n    return <p>Loading your orders...</p>;\r\n  }\r\n\r\n  if (orders.length === 0) {\r\n    return <p>You have no orders.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"orders-list-phone\">\r\n      <h1>\r\n        {statusFilter === 'returned' && 'My Returns'}\r\n        {statusFilter === 'canceled' && 'My Cancellations'}\r\n        {statusFilter === 'history' && 'Order History'}\r\n        {!statusFilter && 'My Orders'}\r\n      </h1>\r\n      <div className=\"filter-container-phone\">\r\n        <label htmlFor=\"orderFilterPhone\">Filter Orders: </label>\r\n          <select\r\n            id=\"orderFilterPhone\"\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (value === 'dateAsc') {\r\n                setOrders((prevOrders) =>\r\n                  [...prevOrders].sort((a, b) => new Date(a.orderDate) - new Date(b.orderDate))\r\n                );\r\n              } else if (value === 'dateDesc') {\r\n                setOrders((prevOrders) =>\r\n                  [...prevOrders].sort((a, b) => new Date(b.orderDate) - new Date(a.orderDate))\r\n                );\r\n              } else if (value === 'delivered') {\r\n                fetchUserOrders(user.uid, 'delivered');\r\n              } else if (value === 'canceled') {\r\n                fetchUserOrders(user.uid, 'canceled');\r\n              } else {\r\n                fetchUserOrders(user.uid);\r\n              }\r\n            }}\r\n          >\r\n            <option value=\"all\">All</option>\r\n            <option value=\"delivered\">Delivered</option>\r\n            <option value=\"canceled\">Canceled</option>\r\n            <option value=\"dateAsc\">Date Ascending</option>\r\n            <option value=\"dateDesc\">Date Descending</option>\r\n          </select>\r\n      </div>\r\n      {orders.map(order => (\r\n        <div key={order.id} className=\"order-card-phone\">\r\n          <div className=\"order-products-phone\">\r\n            {order.productIds && order.productIds.length > 0 ? order.productIds.map(pid => {\r\n              const product = getProductById(pid);\r\n              if (!product) return <div key={pid}>Product ID: {pid} (Not found)</div>;\r\n              return (\r\n                <div key={pid} className=\"product-list-item-phone\">\r\n                  <img src={product.imageUrl} alt={product.name} className=\"product-image-phone\" />\r\n                  <div className=\"product-info-phone\">\r\n                    <div className=\"product-name-phone\">{product.name}</div>\r\n                    <div className=\"product-id-phone\">{product.id}</div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            }) : <div>No products found</div>}\r\n          </div>\r\n          <div className=\"shipping-details-phone\">\r\n            {order.shippingAddress ? (\r\n              <>\r\n                <div><strong>Full Name:</strong> {order.shippingAddress.fullName}</div>\r\n                <div><strong>Phone Number:</strong> {order.shippingAddress.phoneNumber}</div>\r\n                <div><strong>Building / House No / Floor / Street:</strong> {order.shippingAddress.building}</div>\r\n                <div><strong>Colony / Suburb / Locality / Landmark:</strong> {order.shippingAddress.colony}</div>\r\n                <div><strong>Region:</strong> {order.shippingAddress.region}</div>\r\n                <div><strong>City:</strong> {order.shippingAddress.city}</div>\r\n                <div><strong>Area:</strong> {order.shippingAddress.area}</div>\r\n                <div><strong>Address:</strong> {order.shippingAddress.address}</div>\r\n              </>\r\n            ) : <div>No shipping details available.</div>}\r\n          </div>\r\n          <div className=\"order-meta-phone\">\r\n            <div><strong>Order ID:</strong> {order.id}</div>\r\n            <div><strong>Status:</strong> {order.status === 'confirmed' ? 'processing' : order.status}</div>\r\n            <div><strong>Price:</strong> ${order.totalPrice ? order.totalPrice.toFixed(2) : 'N/A'}</div>\r\n            <div><strong>Payment Method:</strong> {order.paymentMethod || 'N/A'}</div>\r\n              <div className=\"order-actions-phone\">\r\n          {order.status === 'processing' ? (\r\n            <button className=\"btn-cancel-phone\" onClick={() => handleCancelOrder(order.id)}>Cancel Order</button>\r\n          ) : (\r\n            order.status === 'canceled' ? <span className=\"status-canceled-phone\">Order Canceled</span> : <span className=\"status-delivered-phone\">Order {order.status.charAt(0).toUpperCase() + order.status.slice(1)}</span>\r\n          )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyOrdersPhone;\r\n","import React from 'react';\r\nimport MyOrdersPhone from './MyOrdersPhone';\r\nimport './HistoryPhone.css';\r\n\r\nconst HistoryPhone = () => {\r\n  return (\r\n    <section className=\"profile-section orders-section-phone\">\r\n      <MyOrdersPhone statusFilter=\"history\" />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default HistoryPhone;\r\n"],"names":["_ref","statusFilter","orders","setOrders","useState","products","setProducts","loading","setLoading","auth","getAuth","user","setUser","useEffect","unsubscribe","onAuthStateChanged","currentUser","fetchUserOrders","uid","fetchProducts","async","userId","filterStatus","url","concat","res","fetch","data","json","filteredOrders","filter","order","status","historyStatuses","includes","error","console","_jsx","children","length","_jsxs","className","htmlFor","id","onChange","e","value","target","prevOrders","sort","a","b","Date","orderDate","map","productIds","pid","product","find","src","imageUrl","alt","name","shippingAddress","_Fragment","fullName","phoneNumber","building","colony","region","city","area","address","totalPrice","toFixed","paymentMethod","onClick","orderId","method","headers","body","JSON","stringify","ok","_objectSpread","handleCancelOrder","charAt","toUpperCase","slice","HistoryPhone","MyOrdersPhone"],"sourceRoot":""}