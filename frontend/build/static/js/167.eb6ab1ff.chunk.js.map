{"version":3,"file":"static/js/167.eb6ab1ff.chunk.js","mappings":"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","sources":["components/myorders.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getAuth } from 'firebase/auth';\r\nimport PropTypes from 'prop-types';\r\nimport './myorders.css';\r\nimport { useNotification } from '../contexts/NotificationContext';\r\n\r\nconst MyOrders = ({ statusFilter, readOnly = false }) => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const auth = getAuth();\r\n  const [user, setUser] = useState(null);\r\n  const { showOrderStatusNotification, showOrderCancellationNotification, updateOrders } = useNotification();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((currentUser) => {\r\n      setUser(currentUser);\r\n    });\r\n    return () => unsubscribe();\r\n  }, [auth]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchUserOrders(user.uid);\r\n      fetchProducts();\r\n    } else {\r\n      setOrders([]);\r\n      setLoading(false);\r\n    }\r\n  }, [user, statusFilter]);\r\n\r\n  // Update orders in notification context whenever orders change\r\n  useEffect(() => {\r\n    if (orders.length > 0) {\r\n      updateOrders(orders);\r\n    }\r\n  }, [orders, updateOrders]);\r\n\r\n  const fetchUserOrders = async (userId, filterStatus) => {\r\n    try {\r\n      let url = `http://localhost:5000/api/orders?userId=${userId}`;\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      let filteredOrders = data;\r\n      if (filterStatus) {\r\n        // Filter by the selected status from dropdown\r\n        if (filterStatus === 'delivered') {\r\n          filteredOrders = data.filter(order => order.status === 'delivered');\r\n        } else if (filterStatus === 'canceled') {\r\n          filteredOrders = data.filter(order => order.status === 'canceled');\r\n        } else {\r\n          // For other statuses, we might want to implement specific filtering logic\r\n          // For now, we'll just return all orders for other statuses\r\n          filteredOrders = data;\r\n        }\r\n      } else if (statusFilter) {\r\n        // Filter by the statusFilter prop (used when component is first loaded or prop changes)\r\n        if (statusFilter === 'history') {\r\n          // Show only orders that are canceled or delivered\r\n          const historyStatuses = ['canceled', 'delivered'];\r\n          filteredOrders = data.filter(order => historyStatuses.includes(order.status));\r\n        } else if (statusFilter === 'canceled') {\r\n          filteredOrders = data.filter(order => order.status === 'canceled');\r\n        } else if (statusFilter === 'delivered') {\r\n          filteredOrders = data.filter(order => order.status === 'delivered');\r\n        } else {\r\n          filteredOrders = data.filter(order => order.status === statusFilter);\r\n        }\r\n      } else {\r\n        // No statusFilter provided, show only orders not canceled or delivered (in process)\r\n        filteredOrders = data.filter(order => order.status !== 'canceled' && order.status !== 'delivered');\r\n      }\r\n      setOrders(filteredOrders);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching user orders:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/products');\r\n      const data = await res.json();\r\n      setProducts(data);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n    }\r\n  };\r\n\r\n  const getProductById = (id) => {\r\n    return products.find(product => product.id === id);\r\n  };\r\n\r\n  const handleCancelOrder = async (orderId) => {\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/orders/${orderId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ status: 'canceled' }),\r\n      });\r\n      if (res.ok) {\r\n        setOrders(prevOrders =>\r\n          prevOrders.map(order =>\r\n            order.id === orderId ? { ...order, status: 'canceled' } : order\r\n          )\r\n        );\r\n        // Show cancellation notification\r\n        showOrderCancellationNotification(orderId);\r\n      } else {\r\n        console.error('Failed to cancel order');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error canceling order:', error);\r\n    }\r\n  };\r\n\r\n  const handleShipOrder = async (orderId) => {\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/orders/${orderId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ status: 'shipping' }),\r\n      });\r\n      if (res.ok) {\r\n        setOrders(prevOrders =>\r\n          prevOrders.map(order =>\r\n            order.id === orderId ? { ...order, status: 'shipping' } : order\r\n          )\r\n        );\r\n      } else {\r\n        console.error('Failed to mark order as shipped');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error marking order as shipped:', error);\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    return <p>Please log in to view your orders.</p>;\r\n  }\r\n\r\n  if (loading) {\r\n    return <p>Loading your orders...</p>;\r\n  }\r\n\r\n  if (orders.length === 0) {\r\n    return <p>You have no orders.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"profile-section orders-section\">\r\n      <h1>\r\n        {statusFilter === 'returned' && 'My Returns'}\r\n        {statusFilter === 'canceled' && 'My Cancellations'}\r\n        {statusFilter === 'history' && 'Order History'}\r\n        {!statusFilter && 'My Orders'}\r\n      </h1>\r\n      <div className=\"filter-container\">\r\n        <label htmlFor=\"orderFilter\">Filter Orders: </label>\r\n      <select\r\n        id=\"orderFilter\"\r\n        onChange={(e) => {\r\n          const value = e.target.value;\r\n          if (value === 'dateAsc') {\r\n            setOrders((prevOrders) =>\r\n              [...prevOrders].sort((a, b) => new Date(a.orderDate) - new Date(b.orderDate))\r\n            );\r\n          } else if (value === 'dateDesc') {\r\n            setOrders((prevOrders) =>\r\n              [...prevOrders].sort((a, b) => new Date(b.orderDate) - new Date(a.orderDate))\r\n            );\r\n          } else if (value === 'delivered') {\r\n            fetchUserOrders(user.uid, 'delivered');\r\n          } else if (value === 'canceled') {\r\n            fetchUserOrders(user.uid, 'canceled');\r\n          } else {\r\n            fetchUserOrders(user.uid);\r\n          }\r\n        }}\r\n      >\r\n          <option value=\"all\">All</option>\r\n          <option value=\"delivered\">Delivered</option>\r\n          <option value=\"canceled\">Canceled</option>\r\n          <option value=\"dateAsc\">Date Ascending</option>\r\n          <option value=\"dateDesc\">Date Descending</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"orders-table-container\">\r\n        <table className=\"orders-table\">\r\n          <thead>\r\n            <tr>\r\n              <th data-label=\"Products\">Products</th>\r\n              <th data-label=\"Shipping Details\">Shipping Details</th>\r\n              <th data-label=\"Order ID\">Order ID</th>\r\n              <th data-label=\"Status\">Status</th>\r\n              <th data-label=\"Items & Total\">Items & Total</th>\r\n              <th data-label=\"Payment Method\">Payment Method</th>\r\n              <th data-label=\"Actions\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {orders.map(order => (\r\n                <tr key={order.id} className={`order-table-row beautiful-row ${order.status === 'canceled' ? 'canceled-row' : ''} ${order.status === 'delivered' ? 'delivered-row' : ''}`}>\r\n                <td data-label=\"Products\">\r\n                  <ul className=\"product-list\">\r\n                    {order.productDetails && order.productDetails.length > 0 ? order.productDetails.map(productDetail => {\r\n                      const product = getProductById(productDetail.id);\r\n                      if (!product) return <li key={productDetail.id}>Product ID: {productDetail.id} (Not found)</li>;\r\n                      return (\r\n                        <li key={productDetail.id} className=\"product-list-item\">\r\n                          <img src={product.imageUrl} alt={product.name} className=\"product-image\" />\r\n                          <div className=\"product-info\">\r\n                            <div className=\"product-name\">{product.name}</div>\r\n                            <div className=\"product-id\">ID: {product.id}</div>\r\n                            <div className=\"product-price\">Price: ${product.price.toFixed(2)} <br></br> Total: ${(product.price * productDetail.quantity).toFixed(2)}</div>\r\n                            <div className=\"product-quantity\">Quantity: {productDetail.quantity}</div>\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    }) : (order.productIds && order.productIds.length > 0 ? order.productIds.map(pid => {\r\n                      const product = getProductById(pid);\r\n                      if (!product) return <li key={pid}>Product ID: {pid} (Not found)</li>;\r\n                      return (\r\n                        <li key={pid} className=\"product-list-item\">\r\n                          <img src={product.imageUrl} alt={product.name} className=\"product-image\" />\r\n                          <div className=\"product-info\">\r\n                            <div className=\"product-name\">{product.name}</div>\r\n                            <div className=\"product-id\">ID: {product.id}</div>\r\n                            <div className=\"product-price\">Price: ${product.price.toFixed(2)} <br></br> Total: ${(product.price * 1).toFixed(2)}</div>\r\n                            <div className=\"product-quantity\">Quantity: 1</div>\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    }) : <li>No products found</li>)}\r\n                  </ul>\r\n                </td>\r\n                <td data-label=\"Shipping Details\">\r\n                  {order.shippingAddress ? (\r\n                    <div className=\"shipping-details\">\r\n                      <div><strong>Full Name:</strong> {order.shippingAddress.fullName}</div>\r\n                      <div><strong>Phone Number:</strong> {order.shippingAddress.phoneNumber}</div>\r\n                      <div><strong>Building / House No / Floor / Street:</strong> {order.shippingAddress.building}</div>\r\n                      <div><strong>Colony / Suburb / Locality / Landmark:</strong> {order.shippingAddress.colony}</div>\r\n                      <div><strong>Region:</strong> {order.shippingAddress.region}</div>\r\n                      <div><strong>City:</strong> {order.shippingAddress.city}</div>\r\n                      <div><strong>Area:</strong> {order.shippingAddress.area}</div>\r\n                      <div><strong>Address:</strong> {order.shippingAddress.address}</div>\r\n                    </div>\r\n                  ) : <div>No shipping details available.</div>}\r\n                </td>\r\n                <td data-label=\"Order ID\">{order.id}</td>\r\n                <td data-label=\"Status\">{order.status}</td>\r\n                <td data-label=\"Items & Total\">\r\n                  {order.productDetails ?\r\n                    `${order.productDetails.reduce((sum, item) => sum + (item.quantity || 1), 0)} items ($${order.productDetails.reduce((sum, item) => sum + ((item.quantity || 1) * (getProductById(item.id)?.price || 0)), 0).toFixed(2)})` :\r\n                    (order.productIds ?\r\n                      `${order.productIds.length} items ($${order.productIds.reduce((sum, pid) => sum + (getProductById(pid)?.price || 0), 0).toFixed(2)})` :\r\n                      '0 items ($0.00)')\r\n                  }\r\n                </td>\r\n                <td data-label=\"Payment Method\">{order.paymentMethod || 'N/A'}</td>\r\n                <td data-label=\"Actions\">\r\n                      {!readOnly && (order.status === 'processing') ? (\r\n                        <>\r\n                          <button className=\"btn-cancel beautiful-btn\" onClick={() => handleCancelOrder(order.id)}>Cancel Order</button>\r\n                        </>\r\n                      ) : (\r\n                        order.status === 'canceled' ? <span className=\"status-canceled\">Order Canceled</span> : <span className=\"status-delivered\">Order {order.status.charAt(0).toUpperCase() + order.status.slice(1)}</span>\r\n                      )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyOrders;\r\n"],"names":["_ref","statusFilter","readOnly","orders","setOrders","useState","products","setProducts","loading","setLoading","auth","getAuth","user","setUser","showOrderStatusNotification","showOrderCancellationNotification","updateOrders","useNotification","useEffect","unsubscribe","onAuthStateChanged","currentUser","fetchUserOrders","uid","fetchProducts","length","async","userId","filterStatus","url","concat","res","fetch","data","json","filteredOrders","filter","order","status","historyStatuses","includes","error","console","getProductById","id","find","product","_jsx","children","_jsxs","className","htmlFor","onChange","e","value","target","prevOrders","sort","a","b","Date","orderDate","map","productDetails","productDetail","src","imageUrl","alt","name","price","toFixed","quantity","productIds","pid","shippingAddress","fullName","phoneNumber","building","colony","region","city","area","address","reduce","sum","item","_getProductById","_getProductById2","paymentMethod","charAt","toUpperCase","slice","_Fragment","onClick","orderId","method","headers","body","JSON","stringify","ok","_objectSpread","handleCancelOrder"],"sourceRoot":""}