{"version":3,"file":"static/js/876.a7493bfd.chunk.js","mappings":"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","sources":["components/NotificationSettings.js","components/NotificationDropdown.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNotification } from '../contexts/NotificationContext';\r\nimport './NotificationSettings.css';\r\n\r\nconst NotificationSettings = ({ onClose }) => {\r\n  const {\r\n    notificationSettings,\r\n    updateNotificationSettings,\r\n    NOTIFICATION_CATEGORIES,\r\n    NOTIFICATION_PRIORITIES\r\n  } = useNotification();\r\n\r\n  const [settings, setSettings] = useState(notificationSettings);\r\n\r\n  const handleSoundToggle = () => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      soundEnabled: !prev.soundEnabled\r\n    }));\r\n  };\r\n\r\n  const handleCategoryToggle = (category) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      categories: {\r\n        ...prev.categories,\r\n        [category]: !prev.categories[category]\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handlePriorityToggle = (priority) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      priorities: {\r\n        ...prev.priorities,\r\n        [priority]: !prev.priorities[priority]\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleSave = () => {\r\n    updateNotificationSettings(settings);\r\n    if (onClose) onClose();\r\n  };\r\n\r\n  const handleReset = () => {\r\n    const defaultSettings = {\r\n      soundEnabled: true,\r\n      categories: {\r\n        [NOTIFICATION_CATEGORIES.ORDERS]: true,\r\n        [NOTIFICATION_CATEGORIES.CART]: true,\r\n        [NOTIFICATION_CATEGORIES.WISHLIST]: true,\r\n        [NOTIFICATION_CATEGORIES.SYSTEM]: true,\r\n        [NOTIFICATION_CATEGORIES.PROMOTIONS]: false,\r\n        [NOTIFICATION_CATEGORIES.SECURITY]: true\r\n      },\r\n      priorities: {\r\n        [NOTIFICATION_PRIORITIES.LOW]: true,\r\n        [NOTIFICATION_PRIORITIES.MEDIUM]: true,\r\n        [NOTIFICATION_PRIORITIES.HIGH]: true\r\n      }\r\n    };\r\n    setSettings(defaultSettings);\r\n  };\r\n\r\n  const getCategoryIcon = (category) => {\r\n    switch (category) {\r\n      case NOTIFICATION_CATEGORIES.ORDERS: return '📦';\r\n      case NOTIFICATION_CATEGORIES.CART: return '🛒';\r\n      case NOTIFICATION_CATEGORIES.WISHLIST: return '❤️';\r\n      case NOTIFICATION_CATEGORIES.SYSTEM: return '⚙️';\r\n      case NOTIFICATION_CATEGORIES.PROMOTIONS: return '🎉';\r\n      case NOTIFICATION_CATEGORIES.SECURITY: return '🔒';\r\n      default: return '🔔';\r\n    }\r\n  };\r\n\r\n  const getCategoryDescription = (category) => {\r\n    switch (category) {\r\n      case NOTIFICATION_CATEGORIES.ORDERS: return 'Order updates, shipping status, delivery confirmations';\r\n      case NOTIFICATION_CATEGORIES.CART: return 'Cart changes, item availability, price updates';\r\n      case NOTIFICATION_CATEGORIES.WISHLIST: return 'Wishlist item availability, price drops';\r\n      case NOTIFICATION_CATEGORIES.SYSTEM: return 'System maintenance, feature updates, account changes';\r\n      case NOTIFICATION_CATEGORIES.PROMOTIONS: return 'Sales, discounts, special offers';\r\n      case NOTIFICATION_CATEGORIES.SECURITY: return 'Login alerts, password changes, security updates';\r\n      default: return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-settings-overlay\">\r\n      <div className=\"notification-settings-modal\">\r\n        <div className=\"settings-header\">\r\n          <h3>Notification Settings</h3>\r\n          <button className=\"close-btn\" onClick={onClose}>×</button>\r\n        </div>\r\n\r\n        <div className=\"settings-content\">\r\n          {/* Sound Settings */}\r\n          <div className=\"settings-section\">\r\n            <h4>Sound Preferences</h4>\r\n            <div className=\"setting-item\">\r\n              <div className=\"setting-info\">\r\n                <label htmlFor=\"sound-toggle\">Enable notification sounds</label>\r\n                <p className=\"setting-description\">\r\n                  Play audio alerts when notifications are received\r\n                </p>\r\n              </div>\r\n              <label className=\"toggle-switch\">\r\n                <input\r\n                  id=\"sound-toggle\"\r\n                  type=\"checkbox\"\r\n                  checked={settings.soundEnabled}\r\n                  onChange={handleSoundToggle}\r\n                />\r\n                <span className=\"toggle-slider\"></span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Category Settings */}\r\n          <div className=\"settings-section\">\r\n            <h4>Notification Categories</h4>\r\n            <p className=\"section-description\">\r\n              Choose which types of notifications you want to receive\r\n            </p>\r\n            {Object.values(NOTIFICATION_CATEGORIES).map(category => (\r\n              <div key={category} className=\"setting-item\">\r\n                <div className=\"setting-info\">\r\n                  <label htmlFor={`category-${category}`}>\r\n                    {getCategoryIcon(category)} {category.charAt(0).toUpperCase() + category.slice(1)}\r\n                  </label>\r\n                  <p className=\"setting-description\">\r\n                    {getCategoryDescription(category)}\r\n                  </p>\r\n                </div>\r\n                <label className=\"toggle-switch\">\r\n                  <input\r\n                    id={`category-${category}`}\r\n                    type=\"checkbox\"\r\n                    checked={settings.categories[category]}\r\n                    onChange={() => handleCategoryToggle(category)}\r\n                  />\r\n                  <span className=\"toggle-slider\"></span>\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Priority Settings */}\r\n          <div className=\"settings-section\">\r\n            <h4>Notification Priorities</h4>\r\n            <p className=\"section-description\">\r\n              Choose which priority levels you want to receive\r\n            </p>\r\n            {Object.values(NOTIFICATION_PRIORITIES).map(priority => (\r\n              <div key={priority} className=\"setting-item\">\r\n                <div className=\"setting-info\">\r\n                  <label htmlFor={`priority-${priority}`}>\r\n                    {priority.charAt(0).toUpperCase() + priority.slice(1)} Priority\r\n                  </label>\r\n                  <p className=\"setting-description\">\r\n                    {priority === 'high' && 'Critical alerts, security issues, urgent updates'}\r\n                    {priority === 'medium' && 'Important updates, order status changes'}\r\n                    {priority === 'low' && 'Promotional content, general information'}\r\n                  </p>\r\n                </div>\r\n                <label className=\"toggle-switch\">\r\n                  <input\r\n                    id={`priority-${priority}`}\r\n                    type=\"checkbox\"\r\n                    checked={settings.priorities[priority]}\r\n                    onChange={() => handlePriorityToggle(priority)}\r\n                  />\r\n                  <span className=\"toggle-slider\"></span>\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"settings-footer\">\r\n          <button className=\"reset-btn\" onClick={handleReset}>\r\n            Reset to Defaults\r\n          </button>\r\n          <div className=\"footer-actions\">\r\n            <button className=\"cancel-btn\" onClick={onClose}>\r\n              Cancel\r\n            </button>\r\n            <button className=\"save-btn\" onClick={handleSave}>\r\n              Save Settings\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotificationSettings;\r\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport { useNotification } from '../contexts/NotificationContext';\r\nimport NotificationSettings from './NotificationSettings';\r\nimport './NotificationDropdown.css';\r\n\r\nconst NotificationDropdown = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n  const [confirmAction, setConfirmAction] = useState(null);\r\n  const [confirmMessage, setConfirmMessage] = useState('');\r\n  const [markingAllRead, setMarkingAllRead] = useState(false);\r\n  const dropdownRef = useRef(null);\r\n  const {\r\n    notifications,\r\n    clearNotification,\r\n    clearAllNotifications,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    getUnreadCount,\r\n    userId,\r\n    isConnected\r\n  } = useNotification();\r\n\r\n  const toggleDropdown = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  // Close dropdown on outside click\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const handleClearNotification = (id) => {\r\n    clearNotification(id);\r\n  };\r\n\r\n  const handleClearAll = () => {\r\n    setConfirmMessage(`Are you sure you want to clear all ${notifications.length} notifications? This action cannot be undone.`);\r\n    setConfirmAction(() => () => {\r\n      clearAllNotifications();\r\n      setOpen(false);\r\n    });\r\n    setShowConfirmDialog(true);\r\n  };\r\n\r\n  const handleMarkAllRead = () => {\r\n    const unreadCount = getUnreadCount();\r\n    if (unreadCount > 5) {\r\n      setConfirmMessage(`Mark ${unreadCount} notifications as read?`);\r\n      setConfirmAction(() => () => {\r\n        setMarkingAllRead(true);\r\n        markAllAsRead();\r\n        setTimeout(() => {\r\n          setMarkingAllRead(false);\r\n          setOpen(false);\r\n        }, 500);\r\n      });\r\n      setShowConfirmDialog(true);\r\n    } else {\r\n      setMarkingAllRead(true);\r\n      markAllAsRead();\r\n      setTimeout(() => {\r\n        setMarkingAllRead(false);\r\n        setOpen(false);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  const handleConfirmAction = () => {\r\n    if (confirmAction) {\r\n      confirmAction();\r\n    }\r\n    setShowConfirmDialog(false);\r\n    setConfirmAction(null);\r\n    setConfirmMessage('');\r\n  };\r\n\r\n  const handleCancelAction = () => {\r\n    setShowConfirmDialog(false);\r\n    setConfirmAction(null);\r\n    setConfirmMessage('');\r\n  };\r\n\r\n  const getNotificationIcon = (type) => {\r\n    switch (type) {\r\n      case 'success': return '✓';\r\n      case 'error': return '✕';\r\n      case 'warning': return '⚠';\r\n      case 'info': return 'ℹ';\r\n      default: return '🔔';\r\n    }\r\n  };\r\n\r\n  const getCategoryIcon = (category) => {\r\n    switch (category) {\r\n      case 'orders': return '📦';\r\n      case 'cart': return '🛒';\r\n      case 'wishlist': return '❤️';\r\n      case 'favorites': return '⭐';\r\n      case 'promotions': return '🎉';\r\n      case 'security': return '🔒';\r\n      default: return '🔔';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority) => {\r\n    switch (priority) {\r\n      case 'high': return '#ff4757';\r\n      case 'low': return '#2ed573';\r\n      default: return '#3742fa';\r\n    }\r\n  };\r\n\r\n  const handleActionClick = (action, notificationId) => {\r\n    if (action.onClick) {\r\n      action.onClick();\r\n    }\r\n    // Mark as read when action is clicked\r\n    markAsRead(notificationId);\r\n  };\r\n\r\n  const handleNotificationClick = (notification) => {\r\n    if (!notification.read) {\r\n      markAsRead(notification.id);\r\n    }\r\n  };\r\n\r\n  // Get unique categories from notifications\r\n  const getAvailableCategories = useCallback(() => {\r\n    const categories = new Set(['all']);\r\n\r\n    notifications.forEach(notification => {\r\n      if (notification.category) {\r\n        categories.add(notification.category);\r\n      }\r\n    });\r\n\r\n    return Array.from(categories).sort();\r\n  }, [notifications]);\r\n\r\n  // Filter notifications by selected category\r\n  const getFilteredNotifications = useCallback(() => {\r\n    if (selectedCategory === 'all') {\r\n      return notifications;\r\n    }\r\n\r\n    return notifications.filter(\r\n      notification => notification.category === selectedCategory\r\n    );\r\n  }, [notifications, selectedCategory]);\r\n\r\n  // Get notification count by category\r\n  const getCategoryCount = useCallback((category) => {\r\n    if (category === 'all') {\r\n      return notifications.length;\r\n    }\r\n\r\n    return notifications.filter(\r\n      notification => notification.category === category\r\n    ).length;\r\n  }, [notifications]);\r\n\r\n  // Get unread count for selected category\r\n  const getUnreadCountForCategory = useCallback((category) => {\r\n    if (category === 'all') {\r\n      return getUnreadCount();\r\n    }\r\n\r\n    return notifications.filter(\r\n      notification => notification.category === category && !notification.read\r\n    ).length;\r\n  }, [notifications, getUnreadCount]);\r\n\r\n  // Handle category selection\r\n  const handleCategorySelect = (category) => {\r\n    setSelectedCategory(category);\r\n  };\r\n\r\n  const filteredNotifications = getFilteredNotifications();\r\n  const availableCategories = getAvailableCategories();\r\n\r\n  return (\r\n    <div className=\"notification-dropdown\" ref={dropdownRef}>\r\n      <button\r\n        className=\"notification-bell\"\r\n        onClick={toggleDropdown}\r\n        title=\"Notifications\"\r\n      >\r\n        <svg\r\n          width=\"24\"\r\n          height=\"24\"\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\"\r\n            fill=\"currentColor\"\r\n          />\r\n        </svg>\r\n        {getUnreadCount() > 0 && (\r\n          <span className=\"notification-count\">{getUnreadCount()}</span>\r\n        )}\r\n        {isConnected && (\r\n          <span className=\"connection-indicator\" title=\"Real-time connected\">●</span>\r\n        )}\r\n      </button>\r\n      {open && (\r\n        <div className=\"notification-dropdown-menu\">\r\n          <div className=\"notification-header\">\r\n            <h4>Notifications</h4>\r\n            <div className=\"header-actions\">\r\n              <button\r\n                className=\"settings-btn\"\r\n                onClick={() => {\r\n                  setShowSettings(true);\r\n                  setOpen(false);\r\n                }}\r\n                title=\"Notification Settings\"\r\n              >\r\n                ⚙️\r\n              </button>\r\n              {getUnreadCount() > 0 && (\r\n                <button\r\n                  className={`mark-all-read-btn ${markingAllRead ? 'loading' : ''}`}\r\n                  onClick={handleMarkAllRead}\r\n                  disabled={markingAllRead}\r\n                  title=\"Mark all as read\"\r\n                >\r\n                  {markingAllRead ? 'Marking...' : 'Mark All Read'}\r\n                </button>\r\n              )}\r\n              {notifications.length > 0 && (\r\n                <button\r\n                  className=\"clear-all-btn\"\r\n                  onClick={handleClearAll}\r\n                >\r\n                  Clear All\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n          {/* Category Filter */}\r\n          {availableCategories.length > 1 && (\r\n            <div className=\"category-filter\">\r\n              {availableCategories.map(category => (\r\n                <button\r\n                  key={category}\r\n                  className={`category-filter-btn ${selectedCategory === category ? 'active' : ''}`}\r\n                  onClick={() => handleCategorySelect(category)}\r\n                  title={`${category} notifications`}\r\n                >\r\n                  {getCategoryIcon(category)} {category}\r\n                  {getUnreadCountForCategory(category) > 0 && (\r\n                    <span className=\"category-count\">{getUnreadCountForCategory(category)}</span>\r\n                  )}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"notification-list\">\r\n            {filteredNotifications.length === 0 ? (\r\n              <div className=\"no-notifications\">\r\n                {selectedCategory === 'all' ? 'No notifications' : `No ${selectedCategory} notifications`}\r\n              </div>\r\n            ) : (\r\n              filteredNotifications.map((notif) => (\r\n                <div\r\n                  key={notif.id}\r\n                  className={`notification-item notification-${notif.type} ${!notif.read ? 'unread' : ''}`}\r\n                  onClick={() => handleNotificationClick(notif)}\r\n                  style={{\r\n                    borderLeft: `4px solid ${getPriorityColor(notif.priority)}`\r\n                  }}\r\n                >\r\n                  <div className=\"notification-icon\">\r\n                    {getNotificationIcon(notif.type)}\r\n                  </div>\r\n                  <div className=\"notification-category-time\">\r\n                    <span className=\"notification-category\">\r\n                      {getCategoryIcon(notif.category)} {notif.category}\r\n                    </span>\r\n                    <div className=\"notification-date-time\">\r\n                      <small className=\"notification-date\">{notif.timestamp.toLocaleDateString()}</small>\r\n                      <small className=\"notification-time\">{notif.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit', hour12: false})}</small>\r\n                      <small className=\"notification-ampm\">{notif.timestamp.toLocaleTimeString([], {hour12: true}).slice(-2)}</small>\r\n                    </div>\r\n                    {!notif.read && <span className=\"unread-indicator\">●</span>}\r\n                  </div>\r\n                  <p className=\"notification-message\">{notif.message}</p>\r\n\r\n                  <div className=\"notification-content\">\r\n                    \r\n                    {notif.actions && notif.actions.length > 0 && (\r\n                      <div className=\"notification-actions\">\r\n                        {notif.actions.map((action, index) => (\r\n                          <button\r\n                            key={index}\r\n                            className={`action-btn action-${action.type}`}\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleActionClick(action, notif.id);\r\n                            }}\r\n                          >\r\n                            {action.label}\r\n                          </button>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    className=\"notification-close\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      handleClearNotification(notif.id);\r\n                    }}\r\n                    title=\"Dismiss notification\"\r\n                  >\r\n                    ×\r\n                  </button>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Notification Settings Modal */}\r\n      {showSettings && (\r\n        <NotificationSettings\r\n          onClose={() => setShowSettings(false)}\r\n        />\r\n      )}\r\n\r\n      {/* Confirmation Dialog */}\r\n      {showConfirmDialog && (\r\n        <div className=\"confirm-dialog-overlay\">\r\n          <div className=\"confirm-dialog\">\r\n            <h3>Confirm Action</h3>\r\n            <p>{confirmMessage}</p>\r\n            <div className=\"confirm-dialog-actions\">\r\n              <button\r\n                className=\"confirm-btn\"\r\n                onClick={handleConfirmAction}\r\n              >\r\n                Confirm\r\n              </button>\r\n              <button\r\n                className=\"cancel-btn\"\r\n                onClick={handleCancelAction}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotificationDropdown;\r\n"],"names":["_ref","onClose","notificationSettings","updateNotificationSettings","NOTIFICATION_CATEGORIES","NOTIFICATION_PRIORITIES","useNotification","settings","setSettings","useState","getCategoryIcon","category","ORDERS","CART","WISHLIST","SYSTEM","PROMOTIONS","SECURITY","getCategoryDescription","_jsx","className","children","_jsxs","onClick","htmlFor","id","type","checked","soundEnabled","onChange","handleSoundToggle","prev","_objectSpread","Object","values","map","concat","charAt","toUpperCase","slice","categories","handleCategoryToggle","priority","priorities","handlePriorityToggle","handleReset","defaultSettings","LOW","MEDIUM","HIGH","handleSave","NotificationDropdown","open","setOpen","showSettings","setShowSettings","selectedCategory","setSelectedCategory","showConfirmDialog","setShowConfirmDialog","confirmAction","setConfirmAction","confirmMessage","setConfirmMessage","markingAllRead","setMarkingAllRead","dropdownRef","useRef","notifications","clearNotification","clearAllNotifications","markAsRead","markAllAsRead","getUnreadCount","userId","isConnected","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","getNotificationIcon","getPriorityColor","getAvailableCategories","useCallback","Set","forEach","notification","add","Array","from","sort","getFilteredNotifications","filter","getUnreadCountForCategory","length","read","filteredNotifications","availableCategories","ref","toggleDropdown","title","width","height","viewBox","fill","xmlns","d","handleMarkAllRead","unreadCount","setTimeout","disabled","handleClearAll","handleCategorySelect","notif","style","borderLeft","timestamp","toLocaleDateString","toLocaleTimeString","hour","minute","hour12","message","actions","action","index","e","stopPropagation","handleActionClick","notificationId","label","NotificationSettings","handleConfirmAction","handleCancelAction"],"sourceRoot":""}